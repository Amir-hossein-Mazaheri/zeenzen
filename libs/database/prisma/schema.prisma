generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AskAmirhossein {
  id          Int                    @id @default(autoincrement())
  title       String                 @db.VarChar(255)
  description String                 @db.VarChar(1000)
  fullName    String                 @map("full_name") @db.VarChar(255)
  email       String                 @db.VarChar(100)
  isPublished Boolean                @default(false) @map("is_published")
  createdAt   DateTime               @default(now()) @map("created_at")
  answeredAt  DateTime?              @map("answered_at") @db.Date
  whoAskedId  Int?                   @map("who_asked_id")
  whoAsked    User?                  @relation(fields: [whoAskedId], references: [id])
  answers     AskAmirhosseinAnswer[]

  @@map("ask_amirhossein")
}

model AskAmirhosseinAnswer {
  id            Int             @id @default(autoincrement())
  answer        String
  createdAt     DateTime        @default(now()) @map("created_at")
  isPublished   Boolean         @default(false) @map("is_published")
  whoAnsweredId Int             @map("who_answered_id")
  whoAnswered   User            @relation("whoAnswered", fields: [whoAnsweredId], references: [id])
  questionId    Int?            @map("question_id")
  question      AskAmirhossein? @relation(fields: [questionId], references: [id])
  likedUsers    User[]

  @@map("ask_amirhossein_answer")
}

model Avatar {
  id           String   @id @default(uuid())
  name         String   @db.VarChar(255)
  originalName String   @map("original_name") @db.VarChar(255)
  fullPath     String   @map("full_path") @db.VarChar(1000)
  createdAt    DateTime @default(now()) @map("created_at")
  user         User?

  @@map("avatar")
}

model Cart {
  id        String     @id @default(uuid())
  cartItems CartItem[]
  createdAt DateTime   @default(now()) @map("created_at")
  user      User?

  @@map("cart")
}

model CartItem {
  id                    Int     @id @default(autoincrement())
  unitPrice             Decimal @map("unit_price") @db.Decimal(20, 2)
  unitPriceWithDiscount Decimal @map("unit_price_with_discount") @db.Decimal(20, 2)
  quantity              Int
  cartId                String? @map("cart_id")
  cart                  Cart?   @relation(fields: [cartId], references: [id])
  courseId              Int?    @map("course_id")
  course                Course? @relation(fields: [courseId], references: [id])

  @@map("cart_item")
}

model Category {
  id          Int      @id @default(autoincrement())
  label       String   @db.VarChar
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  courses     Course[]
  createdById Int?     @map("created_by_id")
  createdBy   User?    @relation(fields: [createdById], references: [id])

  @@map("category")
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  isPublished Boolean   @default(false) @map("is_published")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  courseId    Int?      @map("course_id")
  course      Course?   @relation(fields: [courseId], references: [id])
  authorId    Int?      @map("author_id")
  author      User?     @relation(fields: [authorId], references: [id])
  parent      Comment?  @relation("commentTocomment", fields: [parentId], references: [id])
  parentId    Int?      @map("parent_id")
  replies     Comment[] @relation("commentTocomment")

  @@map("comment")
}

model Coupon {
  id                Int      @id @default(autoincrement())
  description       String   @db.VarChar(255)
  code              String   @unique @db.VarChar(255)
  percent           Decimal  @db.Decimal(5, 2)
  maxEffect         Decimal? @map("max_effect") @db.Decimal(20, 2)
  expiresAt         DateTime @map("expires_at")
  applyToEveryThing Boolean  @default(false) @map("apply_to_every_thing")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  courses           Course[]

  @@map("coupon")
}

model Course {
  id                         Int              @id @default(autoincrement())
  spotPlayerCourseId         String           @map("spot_player_course_id") @db.VarChar(255)
  title                      String           @db.VarChar(255)
  shortDescription           String           @map("short_description") @db.VarChar(255)
  preRequirementsDescription String?          @map("pre_requirements_description") @db.VarChar(255)
  description                String           @db.VarChar
  level                      CourseLevel      @default(MIXED)
  participantsCount          Int              @default(0) @map("participants_count")
  lecturesCount              Int              @default(0) @map("lectures_count")
  hourseCount                Int              @default(0) @map("hours_count")
  price                      Decimal          @default(0) @db.Decimal(20, 2)
  progress                   Decimal          @default(0) @db.Decimal(5, 2)
  discountPercent            Decimal          @default(0) @map("discount_percent") @db.Decimal(5, 2)
  createdAt                  DateTime         @default(now()) @map("created_at")
  updatedAt                  DateTime         @updatedAt @map("updated_at")
  deletedAt                  DateTime?        @map("deleted_at")
  isDraft                    Boolean          @default(true) @map("is_draft")
  imageId                    String?          @unique @map("image_id")
  image                      CourseImage?     @relation(fields: [imageId], references: [id], onUpdate: SetNull)
  cartItems                  CartItem[]
  comments                   Comment[]
  categories                 Category[]
  coupons                    Coupon[]
  instructors                Instructor[]
  licenses                   License[]
  orderItems                 OrderItem[]
  preRequirements            PreRequirement[]
  questions                  Question[]
  sections                   Section[]
  users                      User[]

  @@map("course")
}

model CourseImage {
  id         String   @id @default(uuid())
  image      String   @db.VarChar(1000)
  coverImage String   @map("cover_image") @db.VarChar(1000)
  createdAt  DateTime @default(now()) @map("created_at")
  course     Course?

  @@map("course_image")
}

model EmailSubscription {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(100)
  subscriptedAt DateTime @default(now()) @map("subscripted_at")

  @@map("email_subscription")
}

model ErrorLog {
  id                      String    @id @default(uuid())
  action                  String    @db.VarChar
  error                   Json
  comment                 String    @default("")
  time                    DateTime  @default(now())
  serverPerformanceStatus Json      @map("server_performance_status")
  deletedAt               DateTime? @map("deleted_at")

  @@map("error_log")
}

model Expertise {
  id           Int            @id @default(autoincrement())
  label        String         @db.VarChar
  isPrimary    Boolean        @default(false) @map("is_primary")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  validated    Boolean        @default(false)
  level        ExpertiseLevel
  instructorId Int?           @map("instructor_id")
  instructor   Instructor?    @relation(fields: [instructorId], references: [id])

  @@map("expertise")
}

model Instructor {
  id         Int         @id @default(autoincrement())
  about      String      @db.VarChar
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  user       User?
  courses    Course[]
  expertises Expertise[]
  socials    Social[]

  @@map("instructor")
}

model Lecture {
  id        Int       @id @default(autoincrement())
  label     String    @db.VarChar(255)
  duration  Int       @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  sectionId Int?     @map("section_id")
  section   Section? @relation(fields: [sectionId], references: [id])

  @@map("lecture")
}

model License {
  id          Int      @id @default(autoincrement())
  licenseCode String   @map("license_code") @db.VarChar(255)
  licenseId   String   @map("license_id") @db.VarChar(255)
  licenseUrl  String   @map("license_url") @db.VarChar
  createdAt   DateTime @default(now()) @map("created_at")
  userId      Int?     @map("user_id")
  user        User?    @relation(fields: [userId], references: [id])
  courses     Course[]

  @@map("license")
}

model Order {
  id            Int         @id @default(autoincrement())
  hasDiscount   Boolean     @default(false) @map("has_discount")
  paymentMethod String      @map("payment_method") @db.VarChar(255)
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now()) @map("created_at")
  userId        Int?        @map("user_id")
  user          User?       @relation(fields: [userId], references: [id])
  orderItems    OrderItem[]
  paymentId     String?     @unique @map("payment_id")
  payment       Payment?    @relation(fields: [paymentId], references: [id])

  @@map("order")
}

model OrderItem {
  id                    Int     @id @default(autoincrement())
  quantity              Int
  unitPrice             Decimal @map("unit_price") @db.Decimal(20, 2)
  unitPriceWithDiscount Decimal @map("unit_price_with_discount") @db.Decimal(20, 2)
  courseId              Int?    @map("course_id")
  course                Course? @relation(fields: [courseId], references: [id])
  orderId               Int?    @map("order_id")
  order                 Order?  @relation(fields: [orderId], references: [id])

  @@map("order_item")
}

model Payment {
  id             String        @id @default(uuid())
  paymentId      String        @unique @map("payment_id")
  amount         Decimal       @db.Decimal(20, 2)
  status         PaymentStatus
  time           DateTime      @default(now()) @db.Timestamp(6)
  userId         Int?          @map("user_id")
  user           User?         @relation(fields: [userId], references: [id])
  order          Order?
  paymentTrachId Int?          @unique @map("payment_track_id")
  paymentTrack   PaymentTrack? @relation(fields: [paymentTrachId], references: [id])

  @@map("payment")
}

model PaymentTrack {
  id               Int      @id @default(autoincrement())
  idpayTrackId     BigInt   @map("id_pay_track_id")
  trackId          String   @map("track_id")
  cardNumber       String   @map("card_number") @db.VarChar(255)
  hashedCardNumber String   @map("hashed_card_number") @db.VarChar(255)
  paidDate         DateTime @map("paid_date") @db.Date
  verificationDate DateTime @map("verification_date") @db.Date
  payment          Payment?

  @@map("payment_track")
}

model PreRequirement {
  id          Int                 @id @default(autoincrement())
  label       String              @db.VarChar(255)
  level       PreRequirementLevel
  description String
  image       String              @db.VarChar(255)
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  deletedAt   Boolean             @default(false)
  courseId    Int?                @map("course_id")
  course      Course?             @relation(fields: [courseId], references: [id])

  @@map("pre_requirement")
}

model Question {
  id            Int      @id @default(autoincrement())
  question      String
  answer        String
  isClosed      Boolean  @default(false) @map("is_closed")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  deletedAt     Boolean  @default(false)
  whoAskedId    Int?     @map("who_asked_id")
  whoAsked      User?    @relation("AskedQuestions", fields: [whoAskedId], references: [id])
  whoAnsweredId Int?     @map("who_answered_id")
  whoAnswered   User?    @relation("AnsweredQuestions", fields: [whoAnsweredId], references: [id])
  courseId      Int?     @map("course_id")
  course        Course?  @relation(fields: [courseId], references: [id])
  User          User?    @relation(fields: [userId], references: [id])
  userId        Int?

  @@map("question")
}

model Report {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  content    String   @db.VarChar(1000)
  reportedAt DateTime @default(now()) @map("reported_at")
  userId     Int?     @map("user_id")
  user       User?    @relation(fields: [userId], references: [id])

  @@map("report")
}

model Section {
  id          Int       @id @default(autoincrement())
  label       String    @db.VarChar
  duration    Int       @default(0)
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  udpatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  courseId    Int?      @map("course_id")
  course      Course?   @relation(fields: [courseId], references: [id])
  lectures    Lecture[]

  @@map("section")
}

model Social {
  id           Int         @id @default(autoincrement())
  type         SocialType
  link         String      @db.VarChar(255)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  instructorId Int?        @map("instructor_id")
  instructor   Instructor? @relation(fields: [instructorId], references: [id])

  @@map("social")
}

model Ticket {
  id             Int             @id @default(autoincrement())
  title          String          @db.VarChar(255)
  description    String
  topic          TicketTopic
  priority       TicketPriority
  isClosed       Boolean         @default(false) @map("is_closed")
  createdAt      DateTime        @default(now()) @map("created_at")
  closedAt       DateTime?       @map("closed_at") @db.Date
  whoAskedId     Int?            @map("who_asked_id")
  whoAsked       User?           @relation(fields: [whoAskedId], references: [id])
  ticketMessages TicketMessage[]

  @@map("ticket")
}

model TicketMessage {
  id       Int      @id @default(autoincrement())
  message  String   @db.VarChar(1000)
  sentAt   DateTime @default(now()) @map("sent_at")
  ticketId Int?     @map("ticket_id")
  ticket   Ticket?  @relation(fields: [ticketId], references: [id])
  userId   Int?     @map("user_id")
  user     User?    @relation(fields: [userId], references: [id])

  @@map("ticket_message")
}

model User {
  id                         Int                    @id @default(autoincrement())
  firstname                  String?                @db.VarChar(100)
  lastname                   String?                @db.VarChar(100)
  email                      String                 @unique @db.VarChar(100)
  phoneNumber                String?                @unique @map("phone_number") @db.VarChar(20)
  role                       UserRole               @default(CUSTOMER)
  password                   String                 @db.VarChar(255)
  scores                     Decimal                @default(0) @db.Decimal(8, 2)
  scoreGainRate              Decimal                @default(1) @map("score_gain_rate") @db.Decimal(4, 2)
  createdAt                  DateTime               @default(now()) @map("created_at")
  updatedAt                  DateTime               @updatedAt @map("updated_at")
  deletedAt                  DateTime?              @map("deleted_at")
  avatarId                   String?                @unique @map("avatar_id")
  avatar                     Avatar?                @relation(fields: [avatarId], references: [id])
  cartId                     String?                @unique @map("cart_id")
  cart                       Cart?                  @relation(fields: [cartId], references: [id])
  comments                   Comment[]
  instructorId               Int?                   @unique @map("instructor_id")
  instructor                 Instructor?            @relation(fields: [instructorId], references: [id])
  orders                     Order[]
  askedQuestions             Question[]             @relation("AskedQuestions")
  answeredQuestion           Question[]             @relation("AnsweredQuestions")
  courses                    Course[]
  createdCategories          Category[]
  logs                       UserLog[]
  tickets                    Ticket[]
  payments                   Payment[]
  ticketMessages             TicketMessage[]
  licenses                   License[]
  reports                    Report[]
  Question                   Question[]
  askAmirhosseinAnswers      AskAmirhosseinAnswer[] @relation("whoAnswered")
  askAmirhosseinAsks         AskAmirhossein[]
  likedAskAmirhosseinAnswers AskAmirhosseinAnswer[]

  @@map("user")
}

model UserLog {
  id        String        @id @default(uuid())
  status    UserLogStatus
  time      DateTime      @default(now())
  deletedAt DateTime?     @map("deleted_at")
  userId    Int?          @map("user_id")
  user      User?         @relation(fields: [userId], references: [id])

  @@map("user_log")
}

model ValidatedEmail {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(100)
  code      String   @db.VarChar(255)
  expiresAt DateTime @map("expires_at")

  @@map("validated_email")
}

enum CourseLevel {
  ELEMENTARY
  INTERMEDIATE
  ADVANCED
  MIXED

  @@map("course_level")
}

enum ExpertiseLevel {
  LOW
  JUNIOR
  MEDIUM
  MID_SENIOR
  SENIOR
  EXPERT

  @@map("expertise_level")
}

enum OrderStatus {
  FULFILLED
  PENDING
  FAILED

  @@map("order_status")
}

enum PaymentStatus {
  PENDING
  REJECTED
  FULFILLED
  FAILED

  @@map("payment_status")
}

enum PreRequirementLevel {
  BASIC
  MEDIUM
  ADVANCED
  EXPERT

  @@map("pre_requirement_level")
}

enum SocialType {
  INSTAGRAM
  GITHUB
  GITLAB
  EMAIL
  LINKEDIN
  TELEGRAM
  TWEETER
  FACEBOOK
  WHATSAPP
  OTHER

  @@map("social_type")
}

enum TicketPriority {
  HIGHT
  MODERATE
  LOW

  @@map("ticket_priority")
}

enum TicketTopic {
  COURSE
  PAYMENT
  IMPROVEMENT
  OTHER

  @@map("ticket_topic")
}

enum UserLogStatus {
  LOGGED_IN
  LOGGED_OUT

  @@map("user_log_status")
}

enum UserRole {
  CUSTOMER
  INSTRUCTOR
  ADMIN

  @@map("user_role")
}
